# Blockchain Anomaly Detection - Makefile for common development tasks
# Usage: make <target>

.PHONY: help install install-dev test test-unit test-integration lint format clean docker-build docker-run docker-stop docker-logs run-pipeline run-dashboard run-api run-automation start stop health-check

# Default target
help:
	@echo "Available targets:"
	@echo "  help              - Show this help message"
	@echo ""
	@echo "Setup:"
	@echo "  install           - Install production dependencies"
	@echo "  install-dev       - Install development dependencies"
	@echo ""
	@echo "Application:"
	@echo "  start             - Start complete system (infra + pipeline + dashboard)"
	@echo "  stop              - Stop all services"
	@echo "  run-pipeline      - Start data pipeline only"
	@echo "  run-dashboard     - Start dashboard only"
	@echo "  run-api           - Start FastAPI server only"
	@echo "  run-automation    - Start automation system only"
	@echo "  run-training      - Train anomaly detection model"
	@echo ""
	@echo "Docker:"
	@echo "  docker-build      - Build Docker image"
	@echo "  docker-run        - Start all services"
	@echo "  docker-stop       - Stop all services"
	@echo "  docker-logs       - View service logs"
	@echo ""
	@echo "Code Quality:"
	@echo "  test              - Run all tests"
	@echo "  test-unit         - Run unit tests"
	@echo "  test-integration  - Run integration tests"
	@echo "  lint              - Run linting (black, isort, mypy)"
	@echo "  format            - Format code (black, isort)"
	@echo ""
	@echo "Utilities:"
	@echo "  health-check      - Check system health"
	@echo "  clean             - Clean temporary files"

# Installation
install:
	pip install -r requirements.txt

install-dev:
	pip install -r requirements.txt
	pip install pytest pytest-asyncio pytest-cov black isort mypy pre-commit

# Application - Main targets
start: docker-run
	@echo "Starting complete blockchain anomaly detection system..."
	@echo "1. Infrastructure services started"
	@echo "2. Next steps:"
	@echo "   - Run 'make run-pipeline' in another terminal"
	@echo "   - Run 'make run-dashboard' in another terminal"
	@echo "   - Run 'make run-automation' in another terminal"
	@echo ""
	@echo "Access points:"
	@echo "  - Grafana: http://localhost:3000"
	@echo "  - Prometheus: http://localhost:9090"
	@echo "  - MLflow: http://localhost:5000"

stop: docker-stop
	@echo "All services stopped."

run-pipeline:
	@echo "Starting data pipeline..."
	python -m src.data_pipeline.main

run-dashboard:
	@echo "Starting dashboard..."
	streamlit run dashboard_optimized.py

run-api:
	@echo "Starting API server..."
	uvicorn src.api.main:app --host 0.0.0.0 --port 8000 --reload

run-automation:
	@echo "Starting automation system..."
	python start_automation.py

run-training:
	@echo "Training anomaly detection model..."
	python src/anomaly_detection/train_model.py

# Docker
docker-build:
	docker-compose build

docker-run:
	docker-compose up -d

docker-stop:
	docker-compose down

docker-logs:
	docker-compose logs -f

# Code Quality
test:
	pytest tests/ -v --cov=src --cov-report=html --cov-report=term-missing

test-unit:
	pytest tests/unit/ -v

test-integration:
	pytest tests/integration/ -v

lint:
	@echo "Running black..."
	black --check src/ tests/
	@echo "Running isort..."
	isort --check-only src/ tests/
	@echo "Running mypy..."
	mypy src/

format:
	black src/ tests/
	isort src/ tests/

# Utilities
health-check:
	@echo "Running health check..."
	python automation/run_automation.py --action health

clean:
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	find . -type f -name "*.log" -delete
	find . -type f -name ".coverage" -delete
	find . -type d -name "htmlcov" -exec rm -rf {} +
	find . -type d -name ".pytest_cache" -exec rm -rf {} +
	find . -type d -name "*.egg-info" -exec rm -rf {} +

# Development workflow
dev-setup: install-dev
	pre-commit install
	@echo "Development environment setup complete!"

dev-check: format lint test
	@echo "All development checks passed!"

# Quick development cycle
quick-test: format test-unit
	@echo "Quick test cycle complete!"

# MLflow
mlflow-server:
	mlflow server --host 0.0.0.0 --port 5000

# Feature engineering
run-features:
	python src/feature_engineering/main.py

# Model retraining
run-retraining:
	python automation/flows/model_retraining.py

# Test MLflow integration
test-mlflow:
	python test_mlflow_integration.py

# Database setup
setup-db:
	@echo "Setting up database..."
	@echo "Database setup completed via docker-compose"

# Generate sample data
generate-data:
	@echo "Generating sample data..."
	@echo "Sample data will be generated by the pipeline"

# Status and monitoring
status:
	@echo "Checking system status..."
	python automation/run_automation.py --action status

logs:
	@echo "Showing recent logs..."
	docker-compose logs --tail=50

# Help reminder
%:
	@echo "Target '$@' not found. Run 'make help' for available targets."